#!/usr/bin/env node

/**
 * Spinning ASCII Donut
 * 
 * Uma implementa√ß√£o profissional de um torus (donut) 3D girando em ASCII art.
 * Baseado em princ√≠pios matem√°ticos de proje√ß√£o 3D e equa√ß√µes param√©tricas de torus.
 * 
 * Conceitos matem√°ticos aplicados:
 * - Equa√ß√µes param√©tricas de torus: (R + r*cos(v))*cos(u), (R + r*cos(v))*sin(u), r*sin(v)
 * - Rota√ß√£o 3D usando matrizes de rota√ß√£o
 * - Proje√ß√£o perspectiva para simular profundidade
 * - Ilumina√ß√£o usando produto escalar (dot product) para determinar brilho
 * 
 * @author ASCII Art Specialist | IQ 160 em visualiza√ß√µes matem√°ticas
 */

const SCREEN_WIDTH = 80;
const SCREEN_HEIGHT = 24;
const THETA_SPACING = 0.07;
const PHI_SPACING = 0.02;

// Raios do torus
const R1 = 1;  // Raio do c√≠rculo interno
const R2 = 2;  // Dist√¢ncia do centro do torus ao centro do c√≠rculo interno
const K2 = 5;  // Dist√¢ncia do observador √† tela
const K1 = SCREEN_WIDTH * K2 * 3 / (8 * (R1 + R2)); // Fator de escala calculado

// Caracteres para representar diferentes n√≠veis de ilumina√ß√£o (do mais escuro ao mais claro)
const LUMINANCE_CHARS = '.,-~:;=!*#$@';

/**
 * Renderiza um frame do donut girando
 * @param {number} A - √Çngulo de rota√ß√£o no eixo X
 * @param {number} B - √Çngulo de rota√ß√£o no eixo Z
 */
function renderFrame(A, B) {
    // Buffers para armazenar caracteres e profundidade (z-buffer)
    const output = Array(SCREEN_HEIGHT).fill(null).map(() => Array(SCREEN_WIDTH).fill(' '));
    const zbuffer = Array(SCREEN_HEIGHT).fill(null).map(() => Array(SCREEN_WIDTH).fill(0));

    // Pre-calcular senos e cossenos para otimiza√ß√£o
    const cosA = Math.cos(A);
    const sinA = Math.sin(A);
    const cosB = Math.cos(B);
    const sinB = Math.sin(B);

    // Iterar sobre a superf√≠cie do torus usando coordenadas param√©tricas
    for (let theta = 0; theta < 2 * Math.PI; theta += THETA_SPACING) {
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);

        for (let phi = 0; phi < 2 * Math.PI; phi += PHI_SPACING) {
            const cosPhi = Math.cos(phi);
            const sinPhi = Math.sin(phi);

            // Calcular o c√≠rculo do torus
            const circleX = R2 + R1 * cosTheta;
            const circleY = R1 * sinTheta;

            // Aplicar rota√ß√£o 3D (primeiro rota√ß√£o em Y, depois em X)
            // Coordenadas finais ap√≥s rota√ß√£o
            const x = circleX * (cosB * cosPhi + sinA * sinB * sinPhi) - circleY * cosA * sinB;
            const y = circleX * (sinB * cosPhi - sinA * cosB * sinPhi) + circleY * cosA * cosB;
            const z = K2 + cosA * circleX * sinPhi + circleY * sinA;

            // Inverso de z para z-buffer (quanto maior, mais pr√≥ximo)
            const ooz = 1 / z;

            // Proje√ß√£o na tela 2D
            const xp = Math.floor(SCREEN_WIDTH / 2 + K1 * ooz * x);
            const yp = Math.floor(SCREEN_HEIGHT / 2 - K1 * ooz * y);

            // Calcular ilumina√ß√£o usando vetor normal
            // Normal do torus: (cos(theta)*cos(phi), sin(theta), cos(theta)*sin(phi))
            const N_x = cosTheta * (cosB * cosPhi + sinA * sinB * sinPhi) - sinTheta * cosA * sinB;
            const N_y = cosTheta * (sinB * cosPhi - sinA * cosB * sinPhi) + sinTheta * cosA * cosB;
            const N_z = cosA * cosTheta * sinPhi + sinTheta * sinA;

            // Fonte de luz vindo de tr√°s e acima do observador
            // Dot product com vetor de luz normalizado
            const luminance = N_y * 0.5 + N_x * 0.5 - N_z * 0.7;

            // Verificar se o ponto est√° dentro da tela e √© vis√≠vel (z-buffer test)
            if (xp >= 0 && xp < SCREEN_WIDTH && yp >= 0 && yp < SCREEN_HEIGHT) {
                if (ooz > zbuffer[yp][xp]) {
                    zbuffer[yp][xp] = ooz;
                    
                    // Mapear lumin√¢ncia para caractere
                    const luminanceIndex = Math.floor(luminance * 8);
                    const charIndex = Math.max(0, Math.min(LUMINANCE_CHARS.length - 1, luminanceIndex));
                    output[yp][xp] = LUMINANCE_CHARS[charIndex];
                }
            }
        }
    }

    // Limpar tela (ANSI escape code)
    console.clear();

    // Renderizar output
    console.log('\n');
    for (let j = 0; j < SCREEN_HEIGHT; j++) {
        console.log(output[j].join(''));
    }

    // Informa√ß√µes t√©cnicas
    console.log(`\nüç© Spinning Donut | A: ${A.toFixed(2)} | B: ${B.toFixed(2)}`);
    console.log('Pressione Ctrl+C para sair');
}

/**
 * Loop principal de anima√ß√£o
 */
function animate() {
    let A = 0;
    let B = 0;

    // Informa√ß√µes iniciais
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë                         üç© ASCII DONUT ANIMATOR üç©                           ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log('');
    console.log('üìê T√©cnicas Matem√°ticas Aplicadas:');
    console.log('  ‚Ä¢ Equa√ß√µes param√©tricas de torus');
    console.log('  ‚Ä¢ Rota√ß√£o 3D com matrizes de transforma√ß√£o');
    console.log('  ‚Ä¢ Proje√ß√£o perspectiva');
    console.log('  ‚Ä¢ Z-buffering para oclus√£o correta');
    console.log('  ‚Ä¢ Ilumina√ß√£o usando produto escalar (dot product)');
    console.log('');
    console.log('üé® Caracteres de Lumin√¢ncia (escuro ‚Üí claro):');
    console.log(`  "${LUMINANCE_CHARS}"`);
    console.log('');
    console.log('Iniciando anima√ß√£o em 3 segundos...');
    console.log('');

    setTimeout(() => {
        // Intervalo de atualiza√ß√£o (aproximadamente 30 FPS)
        const interval = setInterval(() => {
            renderFrame(A, B);
            
            // Incrementar √¢ngulos de rota√ß√£o
            A += 0.04;
            B += 0.02;

            // Normalizar √¢ngulos para evitar overflow
            if (A > 2 * Math.PI) A -= 2 * Math.PI;
            if (B > 2 * Math.PI) B -= 2 * Math.PI;
        }, 33);

        // Cleanup quando Ctrl+C
        process.on('SIGINT', () => {
            clearInterval(interval);
            console.clear();
            console.log('\n\nüëã Donut finalizado! At√© logo!\n');
            process.exit(0);
        });
    }, 3000);
}

// Verificar se o terminal suporta as dimens√µes necess√°rias
if (process.stdout.columns < SCREEN_WIDTH || process.stdout.rows < SCREEN_HEIGHT + 5) {
    console.warn('‚ö†Ô∏è  AVISO: Seu terminal pode ser muito pequeno para visualiza√ß√£o ideal.');
    console.warn(`    Recomendado: ${SCREEN_WIDTH}x${SCREEN_HEIGHT + 5} ou maior`);
    console.warn(`    Atual: ${process.stdout.columns}x${process.stdout.rows}`);
    console.log('');
}

// Iniciar anima√ß√£o
animate();
